#!/usr/bin/env python

# Summary: prototyping new functionality
# Usage: blenderfarm test [build_farm|tear_down|list]
#---	

from __future__ import division
import sys, os
import subprocess, shlex
import config
sys.path.append("/usr/local/lib/python2.7/site-packages")
from novaclient.client import Client
# import swiftclient
import requests, math

instance_base_name = 'blenderfarm'

config = config.getConfig()
commands = []

# Provide blenderfarm completions	
if (sys.argv[1] == "--complete"):
	print "build_farm tear_down list"
	exit()



def build_farm():
	print "tesing the build of a farm..."
	flavor = 'no flavor'
	image = 'no image'
	start = 0
	end = 0
	key = 'blender'

	if len(sys.argv) >= 1:
		start = int(sys.argv[0])
		end = int(sys.argv[0])

	if len(sys.argv) >= 2:
		end = int(sys.argv[1])

	nova = Client(2, os.environ['OS_USERNAME'], os.environ['OS_PASSWORD'], os.environ['OS_TENANT_NAME'], os.environ['OS_AUTH_URL'])

	for f in nova.flavors.list():
		if 'blender.24c2g' in f.name:
			 flavor = f.id
	for i in nova.images.list():
		if 'blender' in i.name:
			image = i.id

	cmd = shlex.split('nova server-group-list')
	p = subprocess.Popen(cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
	for item in p.communicate()[0].splitlines():
		if 'render-farm' in item:
			group = item.split()[1]

	hints = [('group',group)]
	for index in range(start, end + 1):
		name = '%s-%s' % (instance_base_name, str(index).zfill(2))
		print name
		nova.servers.create(name, image, flavor, key_name=key, scheduler_hints=hints)



def tear_down():
	print "burning down the entire farm..."
	nova = Client(2, os.environ['OS_USERNAME'], os.environ['OS_PASSWORD'], os.environ['OS_TENANT_NAME'], os.environ['OS_AUTH_URL'])
	for server in nova.servers.list():
		if instance_base_name in server.name:
			print server.name + " : " + server.id
			nova.servers.delete(server.id)


def instance_list():
	nova = Client(2, os.environ['OS_USERNAME'], os.environ['OS_PASSWORD'], os.environ['OS_TENANT_NAME'], os.environ['OS_AUTH_URL'])

	for server in nova.servers.list():
		if instance_base_name in server.name:
			ipv6_address = server.networks['cybera'][1] 
			print server.name





def main():
	print "this is a test..."
	actions = {"build_farm":build_farm, "tear_down":tear_down, "list":instance_list}
	action = sys.argv[1]

	# remove program name and action
	del sys.argv[0]
	del sys.argv[0]

	try:
		actions[action]()
	except KeyError:
		print "\nwhups, I don't recognise the '%s' action\n" % (action)
		os.system('blenderfarm help test')



if __name__ == "__main__":
	main()
