#!/usr/bin/env python

# TODO: check to see if you're connected to a ipv6 network
# TODO:

# Summary: manage the rendering operation on all blenderfarm nodes
# Usage: blenderfarm render-manage [load|start|stop|status]
# Help:
# - load <url>
#	refresh the render nodes with the files from the repository
#	at the given url
#	eg: blenderfarm render-manage load "https://github.com/barton-satchwill/fake-blender.git"
#
# - start	<blend> <output_dir> [<start_frame>, <end_frame>]
#	start the rendering process.
# 	eg: blenderfarm render-manage start "quicktest.blend" "my/image/dir/quicktest" 1 2
#
# - stop
#	shoot the renderer in the head
#
# - status
#	probably some extract of the render log
#--------------


from __future__ import division
sys.path.append("/usr/local/lib/python2.7/site-packages")
from novaclient.client import Client
import sys, os, requests, math
import config

config = config.getConfig()

# Provide blenderfarm completions	
if (sys.argv[1] == "--complete"):
	print "load start stop status"
	exit()


def load():
	try:
		url = sys.argv[0]
		request_params = {'url': url}
		post_request('set_repo', request_params)

	except IndexError:
		print "whups!  I didn't get a url for the repository"



def start():
	try:
		blend = sys.argv[0]
		output_dir = sys.argv[1]
		start_frame = int(sys.argv[2])
		end_frame = int(sys.argv[3])
	except IndexError:
		print "I didn't get enough parameters"

	i=0
	count = 0
	request_params = {'blend':blend, 'output_dir':output_dir}
	nova = Client(2, os.environ['OS_USERNAME'], os.environ['OS_PASSWORD'], os.environ['OS_TENANT_NAME'], os.environ['OS_AUTH_URL'])

	for server in nova.servers.list():
		if 'blenderfarm' in server.name:
			count += 1
	print "of %d servers, %d are renderfarm servers" % (len(nova.servers.list()), count)

	partition = get_partition(start_frame, end_frame, count)
	print "partition: %s" % partition
	for server in nova.servers.list():
		if 'blenderfarm' in server.name:
			start_frame = partition[i][0]
			end_frame = partition[i][1]
			request_params.update({'start_frame':start_frame, 'end_frame':end_frame})
			ipv6_address = server.networks['cybera'][1]
			server_url = 'http://[%s]:5000/%s' % (ipv6_address, 'render_start')

			# print request_params
			r = requests.get(server_url, params=request_params)
			print r.text
			print r.url
			i+=1
	
	



def stop():
	post_request('render_stop')


def status():
	post_request('render_status')


def post_request(resource, request_params={}):
	nova = Client(2, os.environ['OS_USERNAME'], os.environ['OS_PASSWORD'], os.environ['OS_TENANT_NAME'], os.environ['OS_AUTH_URL'])

	for server in nova.servers.list():
		ipv6_address = server.networks['cybera'][1] 
		server_url = 'http://[%s]:5000/%s' % (ipv6_address, resource)

		if 'blenderfarm' in server.name:
			r = requests.get(server_url, params=request_params)
			print r.text 
			print r.url



def get_partition(start, end, renderers):
	partition = []
	frames = (end - start)
	step = int(math.ceil(frames/renderers))

	start_frame=start
	end_frame=0
	while end_frame < end:
		end_frame=start_frame + step
		if end_frame > end:
			end_frame = end
		print "%d to %d" % (start_frame, end_frame)
		element = start_frame, end_frame
		partition.append(element)
		start_frame = end_frame + 1
	return partition



def main():
	actions = {"load":load, "start":start, "stop":stop, "status":status}
	action = sys.argv[1]

	# remove program name and action
	del sys.argv[0]
	del sys.argv[0]

	try:
		actions[action]()
	except KeyError:
		print "\nwhups, I don't recognise the '%s' action\n" % (action)
		os.system('blenderfarm help render-manage')



if __name__ == "__main__":
	main()
